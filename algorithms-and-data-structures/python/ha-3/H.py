"""
Макса пригласили на праздничный фуршет. В зале расставлены N столов с различными закусками; i-й стол расположен в точке с координатами (Xi; Yi). Макс хочет попробовать все виды закусок, но ему вряд ли удастся унести по угощению с каждого стола одновременно.
Поэтому Макс придумал более хитрый план:
    В соседнем помещении есть свободные столы. Макс возьмёт один из них и поставит его в зал;
    Затем Макс по одному разу сходит от добавленного стола ко всем остальным столам и соберёт на новом столе все виды закусок;
    Наконец, довольный Макс будет занят поеданием угощений.
Конечно же, Макс не хочет слишком много ходить по залу, поэтому ему нужно выбрать место для нового стола так, чтобы сумма расстояний от него до всех остальных столов оказалась как можно меньше. Возможно, наилучшее место совпадёт с одним из имеющихся столов, и тогда Максу не придётся приносить новый.
Помогите Максу определить, где следует разместить стол.

Формат ввода
Первая строка содержит целое число N (1 ≤ N ≤ 100) — количество столов с закусками.
Следующие N строк описывают столы. Каждая из них содержит целые числа Xi и Yi (-1000 ≤ Xi, Yi ≤ 1000) — координаты стола. Координаты всех столов различны.

Формат вывода
Выведите два вещественных числа — координаты точки, в которой Макс должен разместить собственный стол (эта точка может совпадать с расположением одного из имеющихся столов). Если подходящих ответов несколько, выведите любой из них.
Ваш ответ будет считаться верным, если сумма расстояний от выведенной точки до всех столов будет отличаться от минимальной не более, чем на 10-4 (по абсолютной или относительной величине).
"""



from math import sqrt


def fn(x, y, pos):
    return sum(sqrt((x - xx) ** 2 + (y - yy) ** 2) for xx, yy in pos)


def getMinDistSum(positions):
    x = sum(x for x, _ in positions) / len(positions)
    y = sum(y for _, y in positions) / len(positions)
    ans = fn(x, y, positions)
    chg = 100
    while chg > 1e-6:
        zoom = True
        for dx, dy in (-1, 0), (0, -1), (0, 1), (1, 0):
            xx = x + chg * dx
            yy = y + chg * dy
            dd = fn(xx, yy, positions)
            if dd < ans:
                ans = dd
                x, y = xx, yy
                zoom = False
                break
        if zoom:
            chg /= 2
    return x, y


n = int(input())
stroka = []
for i in range(n):
    stroka.append(list(map(int, input().split())))
print(*getMinDistSum(stroka))

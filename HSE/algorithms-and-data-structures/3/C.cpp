#include <bits/stdc++.h>
using namespace std;

vector<int> encoding(string s1) {
    unordered_map<string, int> table;
    for (int i = 0; i <= 255; i++) {
        string ch = "";
        ch += char(i);
        table[ch] = i;
    }
    string p = "", c = "";
    p += s1[0];
    int code = 256;
    vector<int> output_code;
    for (int i = 0; i < s1.length(); i++) {
        if (i != s1.length() - 1)
            c += s1[i + 1];
        if (table.find(p + c) != table.end()) {
            p = p + c;
        } else {
            output_code.push_back(table[p]);
            table[p + c] = code;
            code++;
            p = c;
        }
        c = "";
    }
    output_code.push_back(table[p]);
    return output_code;
}

int main() {
    string s;
    std::getline( std::cin, s );
    vector<int> output_code = encoding(s);
    cout << output_code.size()<< '\n';
    for (int i = 0; i < output_code.size(); i++) {
        if (output_code[i] <= 256) {
            cout << output_code[i] << " ";
        } else {
            cout << output_code[i] - 128 << " ";
        }
    }
}
/*107
76 101 109 112 101 108 45 90 105 118 45 87 132 99 104 32 40 76 90 87 41 32 105 115 32 97 32 117 110 136 101 114 115 97 108 32 108 111 115 115 108 101 166 32 100 97 116 153 99 111 130 114 169 115 105 111 110 152 108 103 111 114 105 116 104 109 32 99 179 173 101 100 32 98 121 32 65 98 114 97 104 97 193 256 130 132 44 32 74 97 176 98 32 135 118 214 97 110 199 84 158 114 202 139 108 141 46
107
76 101 109 112 101 108 45 90 105 118 45 87 132 99 104 32 40 76 90 87 41 32 105 115 32 97 32 117 110 136 101 114 115 97 108 32 108 111 115 115 108 101 166 32 100 97 116 153 99 111 130 114 169 115 105 111 110 152 108 103 111 114 105 116 104 109 32 99 179 173 101 100 32 98 121 32 65 98 114 97 104 97 193 128 130 132 44 32 74 97 176 98 32 135 118 214 97 110 199 84 158 114 202 139 108 141 46

 131
73 110 32 116 104 101 32 121 101 97 114 32 49 56 55 56 32 73 130 111 111 107 32 109 121 32 100 101 103 114 101 133 111 102 32 68 111 99 116 111 138 160 32 77 101 100 105 99 105 110 159 161 131 133 85 110 105 118 101 114 115 105 116 152 169 76 111 110 100 194 44 32 97 195 32 112 114 164 158 154 100 146 32 78 101 116 108 101 152 166 32 103 111 130 104 204 117 103 104 221 133 99 111 117 187 133 203 101 115 99 114 105 98 172 32 102 167 32 115 231 103 101 194 115 32 176 227 199 114 151 46
131
73 110 32 116 104 101 32 121 101 97 114 32 49 56 55 56 32 73 130 111 111 107 32 109 121 32 100 101 103 114 101 133 111 102 32 68 111 99 116 111 138 160 32 77 101 100 105 99 105 110 159 161 131 133 85 110 105 118 101 114 115 105 116 152 169 76 111 110 100 194 44 32 97 195 32 112 114 164 158 154 100 146 32 78 101 116 108 101 152 166 32 103 111 130 104 204 117 103 104 221 133 99 111 117 187 133 203 101 115 99 114 105 98 172 32 102 167 32 115 231 103 101 194 115 32 176 227 199 114 151 46

 */